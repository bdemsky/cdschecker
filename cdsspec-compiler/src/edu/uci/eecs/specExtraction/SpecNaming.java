package edu.uci.eecs.specExtraction;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

/**
 * <p>
 * This class contains most of the constant strings that we will be using
 * throughout the whole annotation extraction and code generation process.
 * </p>
 * 
 * @author Peizhao Ou
 * 
 */
public class SpecNaming {

	// Specification annotation naming

	// Global construct
	public static final String DeclareState = "DeclareState";
	public static final String InitalState = "Initial";
	public static final String CopyState = "Copy";
	public static final String ClearState = "Clear";
	public static final String FinalState = "Final";
	public static final String PrintState = "Print";
	public static final String Commutativity = "Commutativity";
	
	// Define construct
	public static final String Define = "Define";

	// Interface construct
	public static final String Interface = "Interface";
	public static final String Transition = "Transition";
	public static final String PreCondition = "PreCondition";
	public static final String JustifyingPrecondition = "JustifyingPrecondition";
	public static final String SideEffect = "SideEffect";
	public static final String JustifyingPostcondition = "JustifyingPostcondition";
	public static final String PostCondition = "PostCondition";
	public static final String PrintValue = "Print";

	public static final String PrintStateType = "PRINT_STATE";
	public static final String PrintValueType = "PRINT_VALUE";
	public static final String TransitionType = "TRANSITION";
	public static final String PreConditionType = "PRE_CONDITION";
	public static final String JustifyingPreconditionType = "JUSTIFYING_PRECONDITION";
	public static final String SideEffectType = "SIDE_EFFECT";
	public static final String JustifyingPostconditionType = "JUSTIFYING_POSTCONDITION";
	public static final String PostConditionType = "POST_CONDITION";

	// Ordering point construct
	public static final String OPDefine = "OPDefine";
	public static final String PotentialOP = "PotentialOP";
	public static final String OPCheck = "OPCheck";
	public static final String OPClear = "OPClear";
	public static final String OPClearDefine = "OPClearDefine";
	// Entry construct
	public static final String Entry = "Entry";

	// Generated header file name
	public static final String CDSSpecGeneratedName = "cdsspec-generated";
	public static final String CDSSpecGeneratedHeader = "\""
			+ CDSSpecGeneratedName + ".h\"";
	// Generated hedaer file comment
	public static final String CDSSpecGeneratedHeaderComment = "This is a header file auto-generated by CDSSpec compiler; together, CDSSpec\n"
			+ "compiler should have generated the accompanying implementation file that\n"
			+ "implements the some functions declared in this file. In order to instrument\n"
			+ "your benchmark for CDSSpec checker to check, you should include this header\n"
			+ "file in every file you use an CDSSpec annotation. Note that it should be\n"
			+ "placed in the end of all other header files. Currently we require a C++\n"
			+ "compiler that supports C++11.";

	// Generated CPP file name
	public static final String CDSSpecGeneratedCPP = "cdsspec-generated.cc";
	// Generated CPP file comment
	public static final String CDSSpecGeneratedCPPComment = "This is an implementation file auto-generated by CDSSpec compiler to\n"
			+ "instrument your benchmark for CDSSpec checker to check. Currently we require\n"
			+ "a C++ compiler that supports C++11.";

	// Pre-included header files
	public static final HashSet<String> includedHeaders;
	public static final ArrayList<String> includedHeadersList;

	public static final String ATOMIC = "<atomic>";
	public static final String THREADS = "<threads.h>";
	public static final String STDATOMIC = "<stdatomic.h>";
	public static final String STDLIB = "<stdlib.h>";
	public static final String STDIO = "<stdio.h>";

	public static final String MODELTYPES = "<modeltypes.h>";
	public static final String CDSANNOTATE = "<cdsannotate.h>";
	public static final String MYMEMORY = "\"mymemory.h\"";
	public static final String MODELASSERT = "\"model-assert.h\"";
	public static final String LIBRACE = "\"librace.h\"";
	public static final String SPECANNOTATION = "\"specannotation.h\"";
	public static final String SPEC_COMMON = "\"spec_common.h\"";
	public static final String CDSSPEC = "\"cdsspec.h\"";
	public static final String METHODCALL = "\"methodcall.h\"";
	
	// Header files to include in the cdsspec-generated.h
	public static final String SPECANNOTATION_API = "\"specannotation-api.h\"";
	
	// Header files to include in the cdsspec-generated.cc
	// <cdsannotate.h>
	// "spec_common.h"
	// "methodcall.h"
	// "cdsspec.h"
	// "specannotation.h"

	static {
		// Initialize the header set and list
		includedHeaders = new HashSet<String>();
		includedHeadersList = new ArrayList<String>();

		// Add each header to the set
		includedHeadersList.add(ATOMIC);
		includedHeadersList.add(THREADS);
		includedHeadersList.add(STDATOMIC);
		includedHeadersList.add(STDLIB);
		includedHeadersList.add(STDIO);

		includedHeadersList.add(MODELTYPES);
		includedHeadersList.add(CDSANNOTATE);
		includedHeadersList.add(MYMEMORY);
		includedHeadersList.add(MODELASSERT);
		includedHeadersList.add(LIBRACE);
		includedHeadersList.add(SPECANNOTATION);
		includedHeadersList.add(SPEC_COMMON);
		includedHeadersList.add(METHODCALL);
		includedHeadersList.add(CDSSPEC);

		// Add files to list
		for (String header : includedHeadersList) {
			includedHeaders.add(header);
		}
	}

	public static boolean isPreIncludedHeader(String header) {
		return includedHeaders.contains(header)
				|| header.equals(CDSSpecGeneratedHeader);
	}

	// Some CDSSpec keywords and function names
	public static final String NewSize = "NEW_SIZE";
	public static final String New = "NEW";
	// Some CDSSpec types
	public static final String CString = "CSTR";
	public static final String EmptyCString = "_EMPTY";
	public static final String NullFunc = "NULL_FUNC";

	public static final String StateStruct = "StateStruct";
	public static final String Method = "Method";
	public static final String MethodValueField = "value";
	public static final String CommutativityRule = "CommutativityRule";
	public static final String StateFunctions = "StateFunctions";
	public static final String NamedFunction = "NamedFunction";

	public static final String SPEC_ANALYSIS = "SPEC_ANALYSIS";
	// Spec annotations
	public static final String AnnoInit = "AnnoInit";
	public static final String AnnoTypeInit = "INIT";
	public static final String AnnoInterfaceInfo = "AnnoInterfaceInfo";
	public static final String CAnnoInterfaceInfo = "CAnnoInterfaceInfo";
	public static final String SpecAnnotation = "SpecAnnotation";

	// Some CDSSpec state functions
	public static final String InitialFunc = "_Initial";
	public static final String CopyFunc = "_Copy";
	public static final String FinalFunc = "_Final";
	public static final String PrintStateFunc = "_PrintState";

	// Functions for instrumenting annotation
	public static final String CreateInitAnnoFunc = "_createInitAnnotation";
	public static final String CreateInterfaceBeginAnnoFunc = "_createInterfaceBeginAnnotation";
	public static final String SetInterfaceBeginAnnoValueFunc = "_setInterfaceBeginAnnotationValue";
	public static final String CreateInterfaceEndAnnoFunc = "_createInterfaceEndAnnotation";
	public static final String CreateOPDefineAnnoFunc = "_createOPDefineAnnotation";
	public static final String CreateOPDefineUnattachedFunc = "_createOPDefineUnattached";
	public static final String CreateOPClearDefineUnattachedFunc = "_createOPClearDefineUnattached";
	public static final String CreatePotentialOPAnnoFunc = "_createPotentialOPAnnotation";
	public static final String CreateOPCheckAnnoFunc = "_createOPCheckAnnotation";
	public static final String CreateOPClearAnnoFunc = "_createOPClearAnnotation";
	public static final String CreateOPClearDefineAnnoFunc = "_createOPClearDefineAnnotation";

	// Other CDSSpec functions
	public static final String AddInterfaceFunctions = "addInterfaceFunctions";
	public static final String CDSAnnotateFunc = "cdsannotate";
	public static final String PRINT = "PRINT";
	public static final String PrintContainer = "printContainer";
	public static final String PrintMap = "printMap";

	// Special instances
	public static final String Method1 = "_M";
	public static final String Method2 = "_exec";
	public static final String StateInst = "state";
	public static final String OldStateInst = "OLD";
	public static final String NewStateInst = "NEW";
	// Specification types and macros
	public static final String C_RET = "C_RET";
	public static final String S_RET = "S_RET";
	public static final String InterfaceValueInst = "__value";
	
	// The fake ordering point operation
	public static final String FakeOP = "_FAKE_OP_";
	
	// The wrapper prefix that we want to attach to the function name
	public static final String WrapperPrefix = "Wrapper";

	public static final String CommutativityRuleInst = "commuteRules";
	public static final String CommutativityRuleSizeInst = "CommuteRuleSize";
	public static final String StateFunctionsInst = "stateFuncs";
	public static final String AnnoInitInst = "init";
	public static final String AnnoInterfaceInfoInst = "info";

	public static String AppendStr(String original) {
		return "_" + original + "_str";
	}

	public static String CheckCommutativity(int ruleNum) {
		return "_checkCommutativity" + ruleNum;
	}

}
